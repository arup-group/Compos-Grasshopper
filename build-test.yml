# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger: none

variables:
  - group: s3PushInstallers
  - group: pipeline-tokens
  - name: configuration
    value: Release

pool: 'vs17_2'

steps:
- task: NuGetToolInstaller@1

- task: NuGetCommand@2
  displayName: 'Restoring NuGet packages'
  inputs:
      command: 'restore'
      restoreSolution: 'ComposGH.sln'

- powershell: aws s3 cp s3://oasys-installer-store/Compos/compos.msi .\compos.msi
  displayName: 'Download Compos'
  failOnStderr: true

- powershell: |
    $installerPath = $(ls -r $(Pipeline.Workspace)\compos.msi)
    Write-output "Installer Path: ${installerPath}"
    $app = Start-Process ${installerPath} -ArgumentList '/passive /quiet /l* msiLog.txt' -PassThru -Wait
    $app.WaitForExit()
    Write-Output "Exit code: $($app.ExitCode)"
    Write-Output "Exit time: $($app.ExitTime.ToUniversalTime().ToString('yyyy-MM-dd HH:mm:ss')) UTC"
    if ($app.ExitCode -ne 0) {
      Write-Error "Application could not be installed. Error code $($app.ExitCode)"
      exit(1)
    }
  displayName: 'Install Compos'
  failOnStderr: true

- task: VSBuild@1
  displayName: 'Building project in $(configuration)'
  inputs:
    solution: 'ComposGH.sln'
    msbuildArgs: '/p:AppxBundlePlatforms="x64" /p:AppxPackageDir="$(build.artifactStagingDirectory)\AppxPackages" /p:AppxBundle=Always /p:UapAppxPackageBuildMode=StoreUpload /m /nr:false'
    platform: 'x64'
    configuration: '$(configuration)'
    clean: true
  env:
    MSBUILDDISABLENODEREUSE: 1

- powershell: |
    dotnet test --collect:"XPlat Code Coverage" /TestAdapterPath:$env:UserProfile\.nuget\packages\coverlet.collector\3.1.0\build --results-directory .\results --no-restore --logger trx .\ComposTests\bin\Release\net6.0\ComposAPITests.dll
  displayName: dotnet tests

- task: PublishCodeCoverageResults@1
  inputs:
    codeCoverageTool: 'cobertura'
    summaryFileLocation: '$(System.DefaultWorkingDirectory)/results/**/coverage.cobertura.xml'
    pathToSources: '$(System.DefaultWorkingDirectory)'

- powershell: |
    $coverage_file = (Resolve-Path $(System.DefaultWorkingDirectory)/results\*.trx).Path
    codecov -t $env:CODECOV_TOKEN -f $coverage_file -F unittests
  env:
    CODECOV_TOKEN: $(CODECOV_TOKEN)
  displayName: Upload Code Coverage to codecovio
  failOnStderr: true

- powershell: |
    cd ComposGH\bin\x64
    curl https://files.mcneel.com/yak/tools/latest/yak.exe -o yak.exe
    .\yak version
    cd Release
    ..\yak spec
    ..\yak build --platform win
    $yakCurrentVersName = Get-ChildItem -Path . -Filter "*.yak"
    $yakRh7Name =  $yakCurrentVersName -Replace "rh6_27", "rh7_0"
    Rename-Item -Path $yakCurrentVersName -NewName $yakRh7Name
    ..\yak build --platform win
    cd ..
    ls Release\*.yak |% {.\yak push $_.FullName}
  env:
    YAK_TOKEN: $(YAK_TOKEN)
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'), eq(variables.isRelease, 'true'))
  displayName: Deploy yak package