# https://aka.ms/yaml

trigger:
- main

variables:
  - group: s3PushInstallers
  - group: pipeline-tokens
  - name: configuration
    value: Release

pool: 'rhino-compute'

steps:
- powershell: Remove-Item -Path %AppData%\Grasshopper\Libraries\*.ghlink
  displayName: 'Delete orphan .ghlink files'

- task: NuGetToolInstaller@1

- task: NuGetCommand@2
  displayName: 'Restoring NuGet packages'
  inputs:
      command: 'restore'
      restoreSolution: 'ComposGH.sln'

- powershell: aws s3 cp s3://oasys-installer-store/Compos/compos.msi .\compos.msi
  displayName: 'Download Compos'
  failOnStderr: true

- powershell: |
    $installerPath = $(ls -r $(Pipeline.Workspace)\compos.msi)
    Write-output "Installer Path: ${installerPath}"
    $app = Start-Process ${installerPath} -ArgumentList '/passive /quiet /l* msiLog.txt' -PassThru -Wait
    $app.WaitForExit()
    Write-Output "Exit code: $($app.ExitCode)"
    Write-Output "Exit time: $($app.ExitTime.ToUniversalTime().ToString('yyyy-MM-dd HH:mm:ss')) UTC"
    if ($app.ExitCode -ne 0) {
      Write-Error "Application could not be installed. Error code $($app.ExitCode)"
      exit(1)
    }
  displayName: 'Install Compos'
  failOnStderr: true

- task: VSBuild@1
  displayName: 'Building project in $(configuration)'
  inputs:
    solution: 'ComposGH.sln'
    msbuildArgs: '/p:AppxBundlePlatforms="x64" /p:AppxPackageDir="$(build.artifactStagingDirectory)\AppxPackages" /p:AppxBundle=Always /p:UapAppxPackageBuildMode=StoreUpload /m /nr:false'
    platform: 'x64'
    configuration: '$(configuration)'
    clean: true
  env:
    MSBUILDDISABLENODEREUSE: 1

- powershell: |
    dotnet test --collect:"XPlat Code Coverage" /TestAdapterPath:$env:UserProfile\.nuget\packages\coverlet.collector\3.1.0\build --results-directory .\results\composapi --no-restore --logger trx .\ComposTests\bin\x64\Release\net6.0\ComposAPITests.dll
    dotnet test --collect:"XPlat Code Coverage" /TestAdapterPath:$env:UserProfile\.nuget\packages\coverlet.collector\3.1.0\build --results-directory .\results\composgh --no-restore --logger trx .\ComposGHTests\bin\x64\Release\net48\ComposGHTests.dll
    dotnet test --collect:"XPlat Code Coverage" /TestAdapterPath:$env:UserProfile\.nuget\packages\coverlet.collector\3.1.0\build --results-directory .\results\integration --no-restore --logger trx .\IntegrationTests\bin\x64\Release\net48\IntegrationTests.dll
    # dotnet test --collect:"XPlat Code Coverage" /TestAdapterPath:$env:UserProfile\.nuget\packages\coverlet.collector\3.1.0\build --results-directory .\results\3 --no-restore --logger trx .\ConverterTests\bin\x64\Release\net6.0\ConverterTests.dll
  displayName: dotnet test

- task: PublishCodeCoverageResults@1
  inputs:
    codeCoverageTool: 'cobertura'
    summaryFileLocation: '$(System.DefaultWorkingDirectory)/results/composapi/**/coverage.cobertura.xml'
    pathToSources: '$(System.DefaultWorkingDirectory)'

#    $coverage_file = (Resolve-Path $(System.DefaultWorkingDirectory)/results\*.trx).Path
- powershell: |
    $coverage_file_composapi = (Resolve-Path $(System.DefaultWorkingDirectory)/results/composapi/*/coverage.cobertura.xml).Path
    echo $coverage_file_composapi
    $coverage_file_composgh = (Resolve-Path $(System.DefaultWorkingDirectory)/results/composgh/*/coverage.cobertura.xml).Path
    echo $coverage_file_composgh
    $coverage_file_integration = (Resolve-Path $(System.DefaultWorkingDirectory)/results/integration/*/coverage.cobertura.xml).Path
    echo $coverage_file_integration
    Copy-Item $coverage_file_composapi $(System.DefaultWorkingDirectory)\results\coverage_composapi.xml
    Copy-Item $coverage_file_composgh $(System.DefaultWorkingDirectory)\results\coverage_composgh.xml
    Copy-Item $coverage_file_integration $(System.DefaultWorkingDirectory)\results\coverage_integration.xml
    ls $(System.DefaultWorkingDirectory)\results\
    codecov -t $env:CODECOV_TOKEN --dir $(System.DefaultWorkingDirectory)\results --file coverage_composapi.xml -F composapi
    codecov -t $env:CODECOV_TOKEN --dir $(System.DefaultWorkingDirectory)\results --file coverage_composgh.xml -F composgh
    codecov -t $env:CODECOV_TOKEN --dir $(System.DefaultWorkingDirectory)\results --file coverage_integration.xml -F integration
  env:
    CODECOV_TOKEN: $(CODECOV_TOKEN)
  displayName: Upload Code Coverage to codecovio
  failOnStderr: true

- task: PowerShell@2
  displayName: Check for existing tags
  inputs:
    targetType: 'inline'
    script: |
        $versionInfo = $(Get-Item .\ComposGH\bin\x64\Release\ComposGH.dll).VersionInfo
        echo $versionInfo
        $fullVersion = [array]${versionInfo}.FileVersion.split('.')
        $currentTime = $(Get-Date -Format "dddd MM/dd/yyyy HH:mm")
        $majorVersion = [string]$fullVersion[0]
        $minorVersion = [string]$fullVersion[1]
        $spVersion = [string]$fullVersion[2]
        $buildNumber = [string]$fullVersion[3]

        $tag = [array]@($exeName,$majorVersion,$minorVersion,$spVersion,$buildNumber)
        $tagNumbersOnly = [array]@($majorVersion,$minorVersion,$spVersion,$buildNumber)

        $dotSeparatedTag = $majorVersion + "." + $minorVersion + "." + $spVersion + "-beta"
        $underscoreSeparatedTag = $majorVersion + "_" + $minorVersion + "_" + $spVersion + "_" + $buildNumber
        $tagNumbersOnlyUnderscore = $majorVersion + "_" + $minorVersion + "_" + $spVersion + "_" + $buildNumber
        $tagNumbersOnlydot = $majorVersion + "." + $minorVersion + "." + $spVersion + "." + $buildNumber
        
        Write-Host ("##vso[task.setvariable variable=dotSeparatedTag]$dotSeparatedTag")
        git rev-parse $dotSeparatedTag
        if($lastExitCode -eq 0){Write-Host ("##vso[task.setvariable variable=TAG_EXISTS]true")}
        if($lastExitCode -eq 0){
          $tagExists = 'true'
          echo $tagExists
        }
    errorActionPreference: 'continue'
    workingDirectory: '$(System.DefaultWorkingDirectory)'
    ignoreLASTEXITCODE: true

- powershell: |
    cd ComposGH\bin\x64
    curl https://files.mcneel.com/yak/tools/latest/yak.exe -o yak.exe
    .\yak version
    cd Release
    ..\yak spec
    Add-Content manifest.yml 'icon: ComposIcon.png'
    ..\yak build --platform win
    $yakCurrentVersName = Get-ChildItem -Path . -Filter "*.yak"
    $yakRh7Name =  $yakCurrentVersName -Replace "rh6_27", "rh7_0"
    Rename-Item -Path $yakCurrentVersName -NewName $yakRh7Name
    ..\yak build --platform win
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'), ne(variables.TAG_EXISTS, 'true'))
  displayName: Package yak

- task: NuGetCommand@2
  inputs:
    command: 'pack'
    packagesToPack: 'ComposGH/*.csproj'
    versioningScheme: 'byEnvVar'
    versionEnvVar: 'dotSeparatedTag'
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'), ne(variables.TAG_EXISTS, 'true'))
  displayName: Package NuGet

- task: GitHubRelease@1
  inputs:
    gitHubConnection: 'github.com_peterjgrainger'
    repositoryName: 'arup-group/Compos-Grasshopper'
    action: 'edit'
    target: '$(Build.SourceVersion)'
    tag: '$(dotSeparatedTag)'
    title: 'ComposGH version $(dotSeparatedTag)'
    releaseNotesSource: 'inline'
    releaseNotesInline: |
      Created from commit https://github.com/arup-group/Compos-Grasshopper/commit/$(Build.SourceVersion)
    assets: |
      $(System.DefaultWorkingDirectory)/**/*.yak
      $(Build.ArtifactStagingDirectory)/**/*.nupkg
      $(Build.ArtifactStagingDirectory)/**/*.symbols.nupkg
    assetUploadMode: 'replace'
    isDraft: true
    isPreRelease: true
    addChangeLog: false
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'), ne(variables.TAG_EXISTS, 'true'))
  displayName: 'Publishing assets to Github'
